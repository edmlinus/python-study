3.20

double getSalary(int hrs,double rate);

int main(){
	int hrs;
	double rate;

	while(1){
		printf("enter # of hours worked (-1 to end): ");
		scanf("%d",&hrs);
		//empty the stdin buffer
		getchar();
		if(hrs == -1)break;
		printf("enter hourly rate of the worker: ");
		scanf("%lf",&rate);
		getchar();
		printf("Salary is %2f \n",getSalary(hrs,rate));
	}
	return 0;

}

double getSalary(int hrs, double rate){
	double salary;
	if(hrs<=40){
		salary = hrs * rate;
	}else{
		salary = 40*rate + (hrs-40)*1.5*rate;
	}
	return salary;
}


3.21

/*
 ============================================================================
 Name        : pre_post_incrementing.c
 Author      : 2018_19427
 Version     : 1.0.1 RELEASE
 Copyright   :
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>


int main(){
	int a = 10;
	char c;
	while(1){
	printf("a is %d\n",a);
	printf("a++ is %d\n",a++);
	printf("a is now %d\n",a);
	printf("--a is %d\n press q to quit: ",--a);
	scanf("%c",&c);
	getchar();
	if(c == 'q') break;
	}
	return 0;
}

3.22

/*
 ============================================================================
 Name        : check_prime.c
 Author      : 2018_19427
 Version     : 1.0.1 RELEASE
 Copyright   :
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

int checkPrime(int n);

int main(){
	int n;
	while(1){
		printf("enter a positive integer (-1 to quit):");
		scanf("%d",&n);
		getchar();
		if(n <=0) break;

		if(checkPrime(n)==1){
			printf("%d is a prime.\n",n);
		}else if(checkPrime(n) == 0){
			printf("%d is not a prime.\n",n);
		}else{
			printf("improper input.\n");
		}
	}

	return 0;
}

int checkPrime(int n){
	int flag = -1;
	if(n>=4){
		flag = 1;
		for(int i = 2; i<= n/2; i++){
			if (n % i == 0) flag = 0;
		}
	}else if(n == 2 || n == 3){
		flag = 1;
	}else if(n == 1){
		flag = 0;
	}
	return flag;
}

3.23

/*
 ============================================================================
 Name        : find the largest number.c
 Author      : 2018-19427
 Version     : 1.0.1 RELEASE
 Copyright   :
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

int main(){
	int counter = 1;
	int largest;
	do{
		int number;
		printf("enter an integer: ");
		scanf("%d",&number);
		getchar();
		if(counter == 1) largest = number;
		if(number>=largest) largest = number;
		printf("out of %d numbers, %d is the largest.\n",counter,largest);
	}while(counter++<10);

	return 0;

}

3.24
/*
 ============================================================================
 Name        : tabular_output.c
 Author      : 2018-19427
 Version     : 1.0.1 RELEASE
 Copyright   :
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

int main(){

	char c;
	while(1){
		printf("N\tN^2\tN^3\tN^4\n");
		for(int i = 1; i<=10; i++){
			printf("%d\t%d\t%d\t%d\n",i,i*i,i*i*i,i*i*i*i);
		}
		printf("press any key to retry, q to quit: ");
		scanf("%c",&c);
		getchar();
		if(c == 'q') break;
	}
	return 0;

}

/*
notes [unit 3]

the IF statement :
if 문은 () 안의 조건이 참이면 실행, 아니면 말고.
()안의 조건은 a==1,b>=1과 같은 논리식이거나,
if(1)과 같이 항상 참이거나, 항상 거짓인 상수를 넣어도 되고,
boolean type 을 반환하는 함수의 return 값을 곧바로 멕여도 된다.
if(scanf("%d",&num)) -> scanf 는 successful 한 matching 의 수를 return 한다.

the FOR statement :
for 문은 정해진 횟수만큼 그 안의 것을 loop 한다.
break -> 속한 가장 안쪽의 반복문에서 탈출.
continue -> 이번 반복 나머지를 건너뛰고 다음 반복을 시작한다.
위 두개는 for 뿐만 아니라 while 에서도 마찬가지.
for(int i = 0; i<n; i++) -> 0,1,2...n-1 로 반복.주로 array iteration 에 사용
for(int i = 0; i<size; i++) -> array iteration 은 주로 이렇게 사용.
for(int i = 1; i<=n; i++) -> 1부터 시작하여 루프. 1...n 까지.

the WHILE statement :
while 문은 ()의 조건이 참인 동안 실행한다.
if 와 마찬가지로 ()안의 조건이 상시적으로 참이 되면 무한루프가 된다.
while(1), while(true) 이렇게 쓰면 무한루프.
무한루프에서 탈출하려면 주로 break; 문을 쓴다.
주로 console input을 계속 받다가 q 를 누르면 프로그램을 종료시키고 싶을 떄,
while(1){.... if(c=='q')break; }


*/
